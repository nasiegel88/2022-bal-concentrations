{
    "type": [
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1
    ],
    "data": [
        "\nR version 4.0.5 (2021-03-31) -- \"Shake and Throw\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: x86_64-conda-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "library(tidyverse)",
        "── \u001B[1mAttaching packages\u001B[22m ────────────────────────────────────────────────────── tidyverse 1.3.2 ──\n\u001B[32m✔\u001B[39m \u001B[34mggplot2\u001B[39m 3.3.6      \u001B[32m✔\u001B[39m \u001B[34mpurrr  \u001B[39m 0.3.4 \n\u001B[32m✔\u001B[39m \u001B[34mtibble \u001B[39m 3.1.8      \u001B[32m✔\u001B[39m \u001B[34mdplyr  \u001B[39m 1.0.10\n\u001B[32m✔\u001B[39m \u001B[34mtidyr  \u001B[39m 1.2.1      \u001B[32m✔\u001B[39m \u001B[34mstringr\u001B[39m 1.4.1 \n\u001B[32m✔\u001B[39m \u001B[34mreadr  \u001B[39m 2.1.2      \u001B[32m✔\u001B[39m \u001B[34mforcats\u001B[39m 0.5.2 \n",
        "── \u001B[1mConflicts\u001B[22m ───────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n",
        "> ",
        "library(rstatix)",
        "\nAttaching package: ‘rstatix’\n\n",
        "The following object is masked from ‘package:stats’:\n\n    filter\n\n",
        "> ",
        "library(ggpubr)",
        "> ",
        "read.delim('samples.txt')",
        "   X Peak  Size Conc. Molarity  X.1\n1  G    2   568  1.65      4.4 0.03\n2  G    3   600  5.72     14.4 0.11\n3  G    4   683  2.50      5.6 0.05\n4  G    5   976 11.44     17.8 0.16\n5  G    6 1,302  2.65      3.1 0.03\n6  G    7 1,823 23.12     19.2 0.20\n7  G    8 2,597 48.71     28.4 0.38\n8  G    9 2,800 27.86     15.1 0.33\n9  G   10 3,583 68.22     28.8 0.92\n10 G   11 6,498 10.36      2.4 1.00\n",
        "> ",
        "read.delim('samples.txt')",
        "   X Peak  Size Conc. Molarity\n1  G    2   568  1.65      4.4\n2  G    3   600  5.72     14.4\n3  G    4   683  2.50      5.6\n4  G    5   976 11.44     17.8\n5  G    6 1,302  2.65      3.1\n6  G    7 1,823 23.12     19.2\n7  G    8 2,597 48.71     28.4\n8  G    9 2,800 27.86     15.1\n9  G   10 3,583 68.22     28.8\n10 G   11 6,498 10.36      2.4\n",
        "> ",
        "t <- read.delim('samples.txt') ",
        "> ",
        "sum(t$)",
        "Error: unexpected ')' in \"sum(t$)\"\n",
        "> ",
        "sum(t$Molarity)",
        "[1] 139.2\n",
        "> ",
        "t$Conc./sum(t$Molarity)",
        " [1] 0.01185345 0.04109195 0.01795977 0.08218391 0.01903736 0.16609195 0.34992816 0.20014368\n [9] 0.49008621 0.07442529\n",
        "> ",
        "sum(t$Conc./sum(t$Molarity))",
        "[1] 1.452802\n",
        "> ",
        "t$Conc.",
        " [1]  1.65  5.72  2.50 11.44  2.65 23.12 48.71 27.86 68.22 10.36\n",
        "> ",
        "t",
        "   X Peak  Size Conc. Molarity\n1  G    2   568  1.65      4.4\n2  G    3   600  5.72     14.4\n3  G    4   683  2.50      5.6\n4  G    5   976 11.44     17.8\n5  G    6 1,302  2.65      3.1\n6  G    7 1,823 23.12     19.2\n7  G    8 2,597 48.71     28.4\n8  G    9 2,800 27.86     15.1\n9  G   10 3,583 68.22     28.8\n10 G   11 6,498 10.36      2.4\n",
        "> ",
        "sum(t$Molarity/sum(t$Molarity))",
        "[1] 1\n",
        "> ",
        "read.delim('samples.txt') %>%",
        "+ ",
        "  mutate(Percentage = Molarity/sum(Molarity))",
        "   X Peak  Size Conc. Molarity Percentage\n1  G    2   568  1.65      4.4 0.03160920\n2  G    3   600  5.72     14.4 0.10344828\n3  G    4   683  2.50      5.6 0.04022989\n4  G    5   976 11.44     17.8 0.12787356\n5  G    6 1,302  2.65      3.1 0.02227011\n6  G    7 1,823 23.12     19.2 0.13793103\n7  G    8 2,597 48.71     28.4 0.20402299\n8  G    9 2,800 27.86     15.1 0.10847701\n9  G   10 3,583 68.22     28.8 0.20689655\n10 G   11 6,498 10.36      2.4 0.01724138\n",
        "> ",
        "read.delim('samples.txt') %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Percentage = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Percentage)",
        "+ ",
        "         )",
        "   X Peak  Size Conc. Molarity Percentage Total\n1  G    2   568  1.65      4.4 0.03160920     1\n2  G    3   600  5.72     14.4 0.10344828     1\n3  G    4   683  2.50      5.6 0.04022989     1\n4  G    5   976 11.44     17.8 0.12787356     1\n5  G    6 1,302  2.65      3.1 0.02227011     1\n6  G    7 1,823 23.12     19.2 0.13793103     1\n7  G    8 2,597 48.71     28.4 0.20402299     1\n8  G    9 2,800 27.86     15.1 0.10847701     1\n9  G   10 3,583 68.22     28.8 0.20689655     1\n10 G   11 6,498 10.36      2.4 0.01724138",
        "     1\n",
        "> ",
        "read.delim('samples.txt') %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Percentage)",
        "+ ",
        "    Percentage =  Molarity/sum(Molarity)/*100",
        "Error: unexpected symbol in:\n\"    Total = sum(Percentage)\n    Percentage\"\n",
        "> ",
        "         )",
        "Error: unexpected ')' in \"         )\"\n",
        "> ",
        "read.delim('samples.txt') %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Percentage),",
        "+ ",
        "    Percentage =  Molarity/sum(Molarity)/*100",
        "Error: unexpected '*' in:\n\"    Total = sum(Percentage),\n    Percentage =  Molarity/sum(Molarity)/*\"\n",
        "> ",
        "         )",
        "Error: unexpected ')' in \"         )\"\n",
        "> ",
        "read.delim('samples.txt') %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Percentage),",
        "+ ",
        "    Percentage =  Molarity/sum(Molarity)*100",
        "+ ",
        "         )",
        "\u001B[1m\u001B[33mError\u001B[39m in `mutate()`:\u001B[22m\n\u001B[38;5;234m\u001B[33m!\u001B[38;5;234m Problem while computing `Total = sum(Percentage)`.\u001B[39m\n\u001B[1mCaused by error in `mask$eval_all_mutate()`:\u001B[22m\n\u001B[33m!\u001B[39m object 'Percentage' not found\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "read.delim('samples.txt') %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Percentage),",
        "+ ",
        "    Percentage =  (Molarity/sum(Molarity))*100",
        "+ ",
        "         )",
        "\u001B[1m\u001B[33mError\u001B[39m in `mutate()`:\u001B[22m\n\u001B[38;5;234m\u001B[33m!\u001B[38;5;234m Problem while computing `Total = sum(Percentage)`.\u001B[39m\n\u001B[1mCaused by error in `mask$eval_all_mutate()`:\u001B[22m\n\u001B[33m!\u001B[39m object 'Percentage' not found\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "read.delim('samples.txt') %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  (Molarity/sum(Molarity))*100",
        "+ ",
        "         )",
        "   X Peak  Size Conc. Molarity Proportion Total Percentage\n1  G    2   568  1.65      4.4 0.03160920     1   3.160920\n2  G    3   600  5.72     14.4 0.10344828     1  10.344828\n3  G    4   683  2.50      5.6 0.04022989     1   4.022989\n4  G    5   976 11.44     17.8 0.12787356     1  12.787356\n5  G    6 1,302  2.65      3.1 0.02227011     1   2.227011\n6  G    7 1,823 23.12     19.2 0.13793103     1  13.793103\n7  G    8 2,597 48.71     28.4 0.20402299     1  20.402299\n8  G    9 2,800 27.86     15.1 0.10847701",
        "     1  10.847701\n9  G   10 3,583 68.22     28.8 0.20689655     1  20.689655\n10 G   11 6,498 10.36      2.4 0.01724138     1   1.724138\n",
        "> ",
        "read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X)",
        "\u001B[38;5;246m# A tibble: 21 × 5\u001B[39m\n\u001B[38;5;246m# Groups:   X [2]\u001B[39m\n   X      Peak Size  Conc. Molarity\n   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m G         2 568    1.65      4.4\n\u001B[38;5;250m 2\u001B[39m G         3 600    5.72     14.4\n\u001B[38;5;250m 3\u001B[39m G         4 683    2.5       5.6\n\u001B[38;5;250m 4\u001B[39m G         5 976   11.4      17.8\n\u001B[38;5;250m 5\u001B[39m G         6 1,302  2.65      3.1\n",
        "\u001B[38;5;250m 6\u001B[39m G         7 1,823 23.1      19.2\n\u001B[38;5;250m 7\u001B[39m G         8 2,597 48.7      28.4\n\u001B[38;5;250m 8\u001B[39m G         9 2,800 27.9      15.1\n\u001B[38;5;250m 9\u001B[39m G        10 3,583 68.2      28.8\n\u001B[38;5;250m10\u001B[39m G        11 6,498 10.4       2.4\n\u001B[38;5;246m# … with 11 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X)",
        "> ",
        "View(data)",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  (Molarity/sum(Molarity))*100",
        "+ ",
        "         )",
        "> ",
        "View(data)",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish((Molarity/sum(Molarity))*100)",
        "+ ",
        "         )",
        "> ",
        "View(data)",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  round(str_squish((Molarity/sum(Molarity))*100), 2)",
        "+ ",
        "         )",
        "\u001B[1m\u001B[33mError\u001B[39m in `mutate()`:\u001B[22m\n\u001B[38;5;234m\u001B[33m!\u001B[38;5;234m Problem while computing `Percentage = round(str_squish((Molarity/sum(Molarity)) *\n  100), 2)`.\n\u001B[36mℹ\u001B[38;5;234m The error occurred in group 1: X = \"G\".\u001B[39m\n\u001B[1mCaused by error in `round()`:\u001B[22m\n\u001B[33m!\u001B[39m non-numeric argument to mathematical function\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "View(data)",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish((Molarity/sum(Molarity))*100)",
        "+ ",
        "         )",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity))*100),2)",
        "+ ",
        "         )",
        "\u001B[1m\u001B[33mError\u001B[39m in `mutate()`:\u001B[22m\n\u001B[38;5;234m\u001B[33m!\u001B[38;5;234m Problem while computing `Percentage = str_squish(round((Molarity/sum(Molarity)) *\n  100), 2)`.\n\u001B[36mℹ\u001B[38;5;234m The error occurred in group 1: X = \"G\".\u001B[39m\n\u001B[1mCaused by error in `str_squish()`:\u001B[22m\n\u001B[33m!\u001B[39m unused argument (2)\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "?round",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = round(Molarity/sum(Molarity), digits = 2),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish((Molarity/sum(Molarity))*100)",
        "+ ",
        "         )",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = round(Molarity/sum(Molarity), digits = 2),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity))*100), digits = 2))",
        "\u001B[1m\u001B[33mError\u001B[39m in `mutate()`:\u001B[22m\n\u001B[38;5;234m\u001B[33m!\u001B[38;5;234m Problem while computing `Percentage = str_squish(round((Molarity/sum(Molarity)) *\n  100), digits = 2)`.\n\u001B[36mℹ\u001B[38;5;234m The error occurred in group 1: X = \"G\".\u001B[39m\n\u001B[1mCaused by error in `str_squish()`:\u001B[22m\n\u001B[33m!\u001B[39m unused argument (digits = 2)\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = round(Molarity/sum(Molarity), digits = 2),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity))*100))",
        "+ ",
        "         )",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(rstatix)",
        "> ",
        "library(ggpubr)",
        "> ",
        "",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = round(Molarity/sum(Molarity), digits = 2),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity))*100))",
        "+ ",
        "         )",
        "> ",
        "",
        "> ",
        "View(data)",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity))*100))",
        "+ ",
        "         )",
        "> ",
        "View(data)",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity))*100))",
        "+ ",
        "         )",
        "> ",
        "",
        "> ",
        "View(data)",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100)))",
        "+ ",
        "         )",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2))",
        "+ ",
        "         )",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(rstatix)",
        "> ",
        "library(ggpubr)",
        "> ",
        "",
        "> ",
        "data <- read.delim('samples.txt') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2))",
        "+ ",
        "         )",
        "> ",
        "",
        "> ",
        "View(data)",
        "> ",
        "read_xl('samples.xlsx')",
        "Error in read_xl(\"samples.xlsx\") : could not find function \"read_xl\"\n",
        "> ",
        "readxl('samples.xlsx')",
        "Error in readxl(\"samples.xlsx\") : could not find function \"readxl\"\n",
        "> ",
        "read_excel('samples.xlsx')",
        "Error in read_excel(\"samples.xlsx\") : \n  could not find function \"read_excel\"\n",
        "> ",
        "library(readxl)",
        "> ",
        "read_excel('samples.xlsx')",
        "\r-\r/\r                                                                                             \r\r/\r                                                                                             \r\r-\r                                                                                             \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n\u001B[38;5;246m# A tibble: 70 × 5\u001B[39m\n   ...1   Peak  Size Conc. Molarity\n   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n",
        "\u001B[38;5;250m 1\u001B[39m G         2   568  1.65      4.4\n\u001B[38;5;250m 2\u001B[39m G         3   600  5.72     14.4\n\u001B[38;5;250m 3\u001B[39m G         4   683  2.5       5.6\n\u001B[38;5;250m 4\u001B[39m G         5   976 11.4      17.8\n\u001B[38;5;250m 5\u001B[39m G         6  \u001B[4m1\u001B[24m302  2.65      3.1\n\u001B[38;5;250m 6\u001B[39m G         7  \u001B[4m1\u001B[24m823 23.1      19.2\n\u001B[38;5;250m 7\u001B[39m G         8  \u001B[4m2\u001B[24m597 48.7      28.4\n\u001B[38;5;250m 8\u001B[39m G         9  \u001B[4m2\u001B[24m800 27.9      15.1\n\u001B[38;5;250m 9\u001B[39m G        10  \u001B[4m3\u001B[24m583 68.2      28.8\n",
        "\u001B[38;5;250m10\u001B[39m G        11  \u001B[4m6\u001B[24m498 10.4       2.4\n\u001B[38;5;246m# … with 60 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(X) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2))",
        "+ ",
        "         )",
        "\r-\r/\r                                                                                             \r\r/\r                                                                                             \r\r-\r                                                                                             \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n\u001B[1m\u001B[33mError\u001B[39m in `group_by()`:\u001B[22m\n\u001B[38;5;234m\u001B[33m!\u001B[38;5;234m Must group by variables found in `.data`.\n\u001B[31m✖\u001B[38;5;234m Column `X` is not found.\u001B[39m\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "read_excel('samples.xlsx')",
        "\r-\r/\r                                                                                             \r\r/\r                                                                                             \r\r-\r                                                                                             \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n\u001B[38;5;246m# A tibble: 70 × 5\u001B[39m\n   ...1   Peak  Size Conc. Molarity\n   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n",
        "\u001B[38;5;250m 1\u001B[39m G         2   568  1.65      4.4\n\u001B[38;5;250m 2\u001B[39m G         3   600  5.72     14.4\n\u001B[38;5;250m 3\u001B[39m G         4   683  2.5       5.6\n\u001B[38;5;250m 4\u001B[39m G         5   976 11.4      17.8\n\u001B[38;5;250m 5\u001B[39m G         6  \u001B[4m1\u001B[24m302  2.65      3.1\n\u001B[38;5;250m 6\u001B[39m G         7  \u001B[4m1\u001B[24m823 23.1      19.2\n\u001B[38;5;250m 7\u001B[39m G         8  \u001B[4m2\u001B[24m597 48.7      28.4\n\u001B[38;5;250m 8\u001B[39m G         9  \u001B[4m2\u001B[24m800 27.9      15.1\n\u001B[38;5;250m 9\u001B[39m G        10  \u001B[4m3\u001B[24m583 68.2      28.8\n",
        "\u001B[38;5;250m10\u001B[39m G        11  \u001B[4m6\u001B[24m498 10.4       2.4\n\u001B[38;5;246m# … with 60 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2))",
        "+ ",
        "         )",
        "\r-\r/\r                                                                                             \r\r/\r                                                                                             \r\r-\r                                                                                             \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n\u001B[38;5;246m# A tibble: 70 × 8\u001B[39m\n\u001B[38;5;246m# Groups:   ...1 [5]\u001B[39m\n   ...1   Peak  Size Conc. Molarity Proportion Total Percentage\n   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m      \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \n",
        "\u001B[38;5;250m 1\u001B[39m G         2   568  1.65      4.4     0.031\u001B[4m6\u001B[24m     1 3.16      \n\u001B[38;5;250m 2\u001B[39m G         3   600  5.72     14.4     0.103      1 10.34     \n\u001B[38;5;250m 3\u001B[39m G         4   683  2.5       5.6     0.040\u001B[4m2\u001B[24m     1 4.02      \n\u001B[38;5;250m 4\u001B[39m G         5   976 11.4      17.8     0.128      1 12.79     \n\u001B[38;5;250m 5\u001B[39m G         6  \u001B[4m1\u001B[24m302  2.65      3.1     0.022\u001B[4m3\u001B[24m     1 2.23      \n\u001B[38;5;250m 6\u001B[39m G         7  \u001B[4m1\u001B[24m823 23.1      19.2     0.138      1 13.79     \n",
        "\u001B[38;5;250m 7\u001B[39m G         8  \u001B[4m2\u001B[24m597 48.7      28.4     0.204      1 20.4      \n\u001B[38;5;250m 8\u001B[39m G         9  \u001B[4m2\u001B[24m800 27.9      15.1     0.108      1 10.85     \n\u001B[38;5;250m 9\u001B[39m G        10  \u001B[4m3\u001B[24m583 68.2      28.8     0.207      1 20.69     \n\u001B[38;5;250m10\u001B[39m G        11  \u001B[4m6\u001B[24m498 10.4       2.4     0.017\u001B[4m2\u001B[24m     1 1.72      \n\u001B[38;5;246m# … with 60 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "View(data)",
        "> ",
        "read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2))",
        "+ ",
        "         )",
        "\r-\r/\r                                                                                             \r\r/\r                                                                                             \r\r-\r                                                                                             \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n\u001B[38;5;246m# A tibble: 70 × 8\u001B[39m\n\u001B[38;5;246m# Groups:   ...1 [5]\u001B[39m\n   ...1   Peak  Size Conc. Molarity Proportion Total Percentage\n   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m      \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \n",
        "\u001B[38;5;250m 1\u001B[39m G         2   568  1.65      4.4     0.031\u001B[4m6\u001B[24m     1 3.16      \n\u001B[38;5;250m 2\u001B[39m G         3   600  5.72     14.4     0.103      1 10.34     \n\u001B[38;5;250m 3\u001B[39m G         4   683  2.5       5.6     0.040\u001B[4m2\u001B[24m     1 4.02      \n\u001B[38;5;250m 4\u001B[39m G         5   976 11.4      17.8     0.128      1 12.79     \n\u001B[38;5;250m 5\u001B[39m G         6  \u001B[4m1\u001B[24m302  2.65      3.1     0.022\u001B[4m3\u001B[24m     1 2.23      \n\u001B[38;5;250m 6\u001B[39m G         7  \u001B[4m1\u001B[24m823 23.1      19.2     0.138      1 13.79     \n",
        "\u001B[38;5;250m 7\u001B[39m G         8  \u001B[4m2\u001B[24m597 48.7      28.4     0.204      1 20.4      \n\u001B[38;5;250m 8\u001B[39m G         9  \u001B[4m2\u001B[24m800 27.9      15.1     0.108      1 10.85     \n\u001B[38;5;250m 9\u001B[39m G        10  \u001B[4m3\u001B[24m583 68.2      28.8     0.207      1 20.69     \n\u001B[38;5;250m10\u001B[39m G        11  \u001B[4m6\u001B[24m498 10.4       2.4     0.017\u001B[4m2\u001B[24m     1 1.72      \n\u001B[38;5;246m# … with 60 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "",
        "> ",
        "View(data)",
        "> ",
        "read_excel('samples.xlsx')",
        "\r-\r/\r                                                                                             \r\r/\r                                                                                             \r\r-\r                                                                                             \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n\u001B[38;5;246m# A tibble: 70 × 5\u001B[39m\n   ...1   Peak  Size Conc. Molarity\n   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n",
        "\u001B[38;5;250m 1\u001B[39m G         2   568  1.65      4.4\n\u001B[38;5;250m 2\u001B[39m G         3   600  5.72     14.4\n\u001B[38;5;250m 3\u001B[39m G         4   683  2.5       5.6\n\u001B[38;5;250m 4\u001B[39m G         5   976 11.4      17.8\n\u001B[38;5;250m 5\u001B[39m G         6  \u001B[4m1\u001B[24m302  2.65      3.1\n\u001B[38;5;250m 6\u001B[39m G         7  \u001B[4m1\u001B[24m823 23.1      19.2\n\u001B[38;5;250m 7\u001B[39m G         8  \u001B[4m2\u001B[24m597 48.7      28.4\n\u001B[38;5;250m 8\u001B[39m G         9  \u001B[4m2\u001B[24m800 27.9      15.1\n\u001B[38;5;250m 9\u001B[39m G        10  \u001B[4m3\u001B[24m583 68.2      28.8\n",
        "\u001B[38;5;250m10\u001B[39m G        11  \u001B[4m6\u001B[24m498 10.4       2.4\n\u001B[38;5;246m# … with 60 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "View(read_excel('samples.xlsx'))",
        "\r-\r/\r                                                                                             \r\r/\r                                                                                             \r\r-\r                                                                                             \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "View(data)",
        "> ",
        "data <- read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2))",
        "+ ",
        "         )",
        "\r-\r/\r                                                                                             \r\r/\r                                                                                             \r\r-\r                                                                                             \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "View(data)",
        "> ",
        "data <- read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    Total = sum(Proportion),",
        "+ ",
        "    Test = length(...1),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2))",
        "+ ",
        "         )",
        "\r-\r/\r                                                                                             \r\r/\r                                                                                             \r\r-\r                                                                                             \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "View(data)",
        "> ",
        "data <- read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    `Total Proportion` = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "    `# of Peaks` = length(...1)",
        "+ ",
        "         )",
        "\r-\r/\r                                                                                             \r\r/\r                                                                                             \r\r-\r                                                                                             \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "View(data)",
        "> ",
        "read_excel('samples.xlsx')[1]",
        "\r-\r/\r                                                                                                                                                                   \r\r/\r                                                                                                                                                                   \r\r-\r                                                                                                                                                                   \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "\u001B[38;5;246m# A tibble: 329 × 1\u001B[39m\n   ...1 \n   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m G    \n\u001B[38;5;250m 2\u001B[39m G    \n\u001B[38;5;250m 3\u001B[39m G    \n\u001B[38;5;250m 4\u001B[39m G    \n\u001B[38;5;250m 5\u001B[39m G    \n\u001B[38;5;250m 6\u001B[39m G    \n\u001B[38;5;250m 7\u001B[39m G    \n\u001B[38;5;250m 8\u001B[39m G    \n\u001B[38;5;250m 9\u001B[39m G    \n\u001B[38;5;250m10\u001B[39m G    \n\u001B[38;5;246m# … with 319 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "unique(read_excel('samples.xlsx')[1])",
        "\r-\r/\r                                                                                                                                                                   \r\r/\r                                                                                                                                                                   \r\r-\r                                                                                                                                                                   \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "\u001B[38;5;246m# A tibble: 25 × 1\u001B[39m\n   ...1 \n   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m G    \n\u001B[38;5;250m 2\u001B[39m M    \n\u001B[38;5;250m 3\u001B[39m N    \n\u001B[38;5;250m 4\u001B[39m P    \n\u001B[38;5;250m 5\u001B[39m Q    \n\u001B[38;5;250m 6\u001B[39m R    \n\u001B[38;5;250m 7\u001B[39m S    \n\u001B[38;5;250m 8\u001B[39m T    \n\u001B[38;5;250m 9\u001B[39m W    \n\u001B[38;5;250m10\u001B[39m Y    \n\u001B[38;5;246m# … with 15 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "if (unique(read_excel('samples.xlsx')[1]) == 26) {",
        "+ ",
        "  ",
        "+ ",
        "  data <- read_excel('samples.xlsx') %>%",
        "+ ",
        "    group_by(...1) %>%",
        "+ ",
        "    mutate(",
        "+ ",
        "      Proportion = Molarity/sum(Molarity),",
        "+ ",
        "      `Total Proportion` = sum(Proportion),",
        "+ ",
        "      Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "      `# of Peaks` = length(...1)",
        "+ ",
        "    )",
        "+ ",
        "  ",
        "+ ",
        "  View(data)",
        "+ ",
        "  ",
        "+ ",
        "}",
        "\r-\r/\r                                                                                                                                                                   \r\r/\r                                                                                                                                                                   \r\r-\r                                                                                                                                                                   \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "Warning message:\n",
        "In if (unique(read_excel(\"samples.xlsx\")[1]) == 26) { :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "> ",
        "unique(read_excel('samples.xlsx')[1]) == 26",
        "\r-\r/\r                                                                                                                                                                   \r\r/\r                                                                                                                                                                   \r\r-\r                                                                                                                                                                   \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "       ...1\n [1,] FALSE\n [2,] FALSE\n [3,] FALSE\n [4,] FALSE\n [5,] FALSE\n [6,] FALSE\n [7,] FALSE\n [8,] FALSE\n [9,] FALSE\n[10,] FALSE\n[11,] FALSE\n[12,] FALSE\n[13,] FALSE\n[14,] FALSE\n[15,] FALSE\n[16,] FALSE\n[17,] FALSE\n[18,] FALSE\n[19,] FALSE\n[20,] FALSE\n[21,] FALSE\n[22,] FALSE\n[23,] FALSE\n[24,] FALSE\n[25,] FALSE\n",
        "> ",
        "if (length(unique(read_excel('samples.xlsx')[1])) == 26) {",
        "+ ",
        "  ",
        "+ ",
        "  data <- read_excel('samples.xlsx') %>%",
        "+ ",
        "    group_by(...1) %>%",
        "+ ",
        "    mutate(",
        "+ ",
        "      Proportion = Molarity/sum(Molarity),",
        "+ ",
        "      `Total Proportion` = sum(Proportion),",
        "+ ",
        "      Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "      `# of Peaks` = length(...1)",
        "+ ",
        "    )",
        "+ ",
        "  ",
        "+ ",
        "  View(data)",
        "+ ",
        "  ",
        "+ ",
        "}",
        "\r-\r/\r                                                                                                                                                                   \r\r/\r                                                                                                                                                                   \r\r-\r                                                                                                                                                                   \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "library(openxlsx)",
        "> ",
        "?openxlsx",
        "> ",
        "  write.xlsx(data, 'clean_data.xlsx')",
        "> ",
        "if (length(unique(read_excel('samples.xlsx')[1])) == 26) {",
        "+ ",
        "  ",
        "+ ",
        "  data <- read_excel('samples.xlsx') %>%",
        "+ ",
        "    group_by(...1) %>%",
        "+ ",
        "    mutate(",
        "+ ",
        "      Proportion = Molarity/sum(Molarity),",
        "+ ",
        "      `Total Proportion` = sum(Proportion),",
        "+ ",
        "      Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "      `# of Peaks` = length(...1)",
        "+ ",
        "    )",
        "+ ",
        "  ",
        "+ ",
        "  write.xlsx(data, 'clean_data.xlsx')",
        "+ ",
        "}",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    `Total Proportion` = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "    `# of Peaks` = length(...1)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  filter( between(size, 590, 625) )",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n\u001B[1m\u001B[33mError\u001B[39m in `filter()`:\u001B[22m\n\u001B[38;5;234m\u001B[33m!\u001B[38;5;234m Problem while computing `..1 = between(size, 590, 625)`.\n\u001B[36mℹ\u001B[38;5;234m The error occurred in group 1: ...1 = \"B\".\u001B[39m\n\u001B[1mCaused by error in `between()`:\u001B[22m\n\u001B[33m!\u001B[39m object 'size' not found\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    `Total Proportion` = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "    `# of Peaks` = length(...1)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  filter( between(Size, 590, 625) )",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n\u001B[38;5;246m# A tibble: 26 × 9\u001B[39m\n\u001B[38;5;246m# Groups:   ...1 [22]\u001B[39m\n   ...1   Peak  Size  Conc. Molarity Proportion `Total Proportion` Percentage `# of Peaks`\n",
        "   \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m      \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m              \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m             \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m G         3   600   5.72     14.4     0.103                   1 10.34                10\n\u001B[38;5;250m 2\u001B[39m M         4   601 171.      431.      0.572                   1 57.21                11\n",
        "\u001B[38;5;250m 3\u001B[39m N         5   592   4.99     12.8     0.072\u001B[4m0\u001B[24m                  1 7.2                  16\n\u001B[38;5;250m 4\u001B[39m N         6   619   2.79      6.8     0.038\u001B[4m2\u001B[24m                  1 3.82                 16\n\u001B[38;5;250m 5\u001B[39m P        10   596  13.4      34       0.092\u001B[4m3\u001B[24m                  1 9.23                 21\n\u001B[38;5;250m 6\u001B[39m P        11   623   8.67     21.1     0.057\u001B[4m3\u001B[24m                  1 5.73                 21\n\u001B[38;5;250m 7\u001B[39m Q         2   598  18.1      45.9     0.324                   1 32.42                12\n",
        "\u001B[38;5;250m 8\u001B[39m R         8   594  14.9      37.9     0.088\u001B[4m4\u001B[24m                  1 8.84                 19\n\u001B[38;5;250m 9\u001B[39m R         9   621   9.31     22.7     0.052\u001B[4m9\u001B[24m                  1 5.29                 19\n\u001B[38;5;250m10\u001B[39m S         3   598 181.      458.      0.812                   1 81.2                 13\n\u001B[38;5;246m# … with 16 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "# Determine concentrations of target sequences (~600bp)",
        "> ",
        "filtered <- read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    `Total Proportion` = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "    `# of Peaks` = length(...1)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  filter( between(Size, 590, 625) )",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "",
        "> ",
        "write.xlsx(filtered, 'filtered_length.xlsx')",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(rstatix)",
        "> ",
        "library(ggpubr)",
        "> ",
        "library(readxl)",
        "> ",
        "library(openxlsx)",
        "> ",
        "",
        "> ",
        "if (length(unique(read_excel('samples.xlsx')[1])) == 26) {",
        "+ ",
        "  ",
        "+ ",
        "  data <- read_excel('samples.xlsx') %>%",
        "+ ",
        "    group_by(...1) %>%",
        "+ ",
        "    mutate(",
        "+ ",
        "      Proportion = Molarity/sum(Molarity),",
        "+ ",
        "      `Total Proportion` = sum(Proportion),",
        "+ ",
        "      Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "      `# of Peaks` = length(...1)",
        "+ ",
        "    )",
        "+ ",
        "  ",
        "+ ",
        "  write.xlsx(data, 'clean_data.xlsx')",
        "+ ",
        "}",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Determine concentrations of target sequences (~600bp)",
        "> ",
        "filtered <- read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    `Total Proportion` = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "    `# of Peaks` = length(...1)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  filter( between(Size, 590, 625) )",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "",
        "> ",
        "write.xlsx(filtered, 'filtered_length.xlsx')",
        "Warning message:\n",
        "In file.create(to[okay]) :",
        "\n ",
        " cannot create file 'filtered_length.xlsx', reason 'Permission denied'\n",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(rstatix)",
        "> ",
        "library(ggpubr)",
        "> ",
        "library(readxl)",
        "> ",
        "library(openxlsx)",
        "> ",
        "",
        "> ",
        "if (length(unique(read_excel('samples.xlsx')[1])) == 26) {",
        "+ ",
        "  ",
        "+ ",
        "  data <- read_excel('samples.xlsx') %>%",
        "+ ",
        "    group_by(...1) %>%",
        "+ ",
        "    mutate(",
        "+ ",
        "      Proportion = Molarity/sum(Molarity),",
        "+ ",
        "      `Total Proportion` = sum(Proportion),",
        "+ ",
        "      Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "      `# of Peaks` = length(...1)",
        "+ ",
        "    )",
        "+ ",
        "  ",
        "+ ",
        "  write.xlsx(data, 'clean_data.xlsx')",
        "+ ",
        "}",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Determine concentrations of target sequences (~600bp)",
        "> ",
        "filtered <- read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    `Total Proportion` = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "    `# of Peaks` = length(...1)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  filter( between(Size, 590, 625) )",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "",
        "> ",
        "write.xlsx(filtered, 'filtered_length.xlsx')",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(rstatix)",
        "> ",
        "library(ggpubr)",
        "> ",
        "library(readxl)",
        "> ",
        "library(openxlsx)",
        "> ",
        "",
        "> ",
        "if (length(unique(read_excel('samples.xlsx')[1])) == 26) {",
        "+ ",
        "  ",
        "+ ",
        "  data <- read_excel('samples.xlsx') %>%",
        "+ ",
        "    group_by(...1) %>%",
        "+ ",
        "    mutate(",
        "+ ",
        "      Proportion = Molarity/sum(Molarity),",
        "+ ",
        "      `Total Proportion` = sum(Proportion),",
        "+ ",
        "      Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "      `# of Peaks` = length(...1)",
        "+ ",
        "    )",
        "+ ",
        "  ",
        "+ ",
        "  write.xlsx(data, 'clean_data.xlsx')",
        "+ ",
        "}",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Determine concentrations of target sequences (~600bp)",
        "> ",
        "filtered <- read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    `Total Proportion` = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "    `# of Peaks` = length(...1)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  filter( between(Size, 590, 630) )",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "",
        "> ",
        "write.xlsx(filtered, 'filtered_length.xlsx')",
        "Warning message:\n",
        "In file.create(to[okay]) :",
        "\n ",
        " cannot create file 'filtered_length.xlsx', reason 'Permission denied'\n",
        "> ",
        "# Determine concentrations of target sequences (~600bp)",
        "> ",
        "filtered <- read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    `Total Proportion` = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "    `# of Peaks` = length(...1)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  filter( between(Size, 590, 630) )",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "",
        "> ",
        "write.xlsx(filtered, 'filtered_length.xlsx')",
        "Warning message:\n",
        "In file.create(to[okay]) :",
        "\n ",
        " cannot create file 'filtered_length.xlsx', reason 'Permission denied'\n",
        "> ",
        "# Determine concentrations of target sequences (~600bp)",
        "> ",
        "filtered <- read_excel('samples.xlsx') %>%",
        "+ ",
        "  group_by(...1) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    Proportion = Molarity/sum(Molarity),",
        "+ ",
        "    `Total Proportion` = sum(Proportion),",
        "+ ",
        "    Percentage =  str_squish(round((Molarity/sum(Molarity)*100), 2)),",
        "+ ",
        "    `# of Peaks` = length(...1)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  filter( between(Size, 590, 630) )",
        "\r-\r/\r                                                                                              \r\r/\r                                                                                              \r\r-\r                                                                                              \r\u001B[38;5;234mNew names:\n\u001B[36m•\u001B[38;5;234m `` -> `...1`\u001B[39m\n",
        "> ",
        "",
        "> ",
        "write.xlsx(filtered, 'filtered_length.xlsx')"
    ]
}